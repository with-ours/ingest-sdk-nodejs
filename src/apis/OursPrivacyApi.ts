/* tslint:disable */
/* eslint-disable */
/**
 * Ours
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IdentifyRequest,
  Track200Response,
  TrackRequest,
} from '../models/index';
import {
    IdentifyRequestFromJSON,
    IdentifyRequestToJSON,
    Track200ResponseFromJSON,
    Track200ResponseToJSON,
    TrackRequestFromJSON,
    TrackRequestToJSON,
} from '../models/index';

export interface IdentifyOperationRequest {
    identifyRequest: IdentifyRequest;
}

export interface TrackOperationRequest {
    trackRequest: TrackRequest;
}

/**
 * 
 */
export class OursPrivacyApi extends runtime.BaseAPI {

    /**
     * Add user properties to an existing user\'s profile.
     * Identify Users
     */
    async identifyRaw(requestParameters: IdentifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Track200Response>> {
        if (requestParameters['identifyRequest'] == null) {
            throw new runtime.RequiredError(
                'identifyRequest',
                'Required parameter "identifyRequest" was null or undefined when calling identify().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/identify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentifyRequestToJSON(requestParameters['identifyRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Track200ResponseFromJSON(jsonValue));
    }

    /**
     * Add user properties to an existing user\'s profile.
     * Identify Users
     */
    async identify(requestParameters: IdentifyOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Track200Response> {
        const response = await this.identifyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Track events from your server and native apps. We recommend our web client-side SDKs for most use-cases. But, if you need to track events from a server, use this endpoint. Please include at least one of: userId, externalId, or email. We will use the provided information to create or associate the event with a user.
     * Track Events
     */
    async trackRaw(requestParameters: TrackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Track200Response>> {
        if (requestParameters['trackRequest'] == null) {
            throw new runtime.RequiredError(
                'trackRequest',
                'Required parameter "trackRequest" was null or undefined when calling track().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/track`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackRequestToJSON(requestParameters['trackRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => Track200ResponseFromJSON(jsonValue));
    }

    /**
     * Track events from your server and native apps. We recommend our web client-side SDKs for most use-cases. But, if you need to track events from a server, use this endpoint. Please include at least one of: userId, externalId, or email. We will use the provided information to create or associate the event with a user.
     * Track Events
     */
    async track(requestParameters: TrackOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Track200Response> {
        const response = await this.trackRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
